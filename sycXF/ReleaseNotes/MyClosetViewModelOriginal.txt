using sycXF.Extensions;
using sycXF.Models.MyCloset;
using sycXF.Services;
using sycXF.Services.MyCloset;
using sycXF.Services.Settings;
using sycXF.Services.User;
using sycXF.ViewModels.Base;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using Xamarin.CommunityToolkit.ObjectModel;
using Microsoft.Maui
using Microsoft.Maui.Controls;

namespace sycXF.ViewModels
{
    public class MyClosetViewModel : ViewModelBase
    {
        #region Services
        private IMyClosetService _myClosetService;
        private ISettingsService _settingsService;
        private IUserService _userService;
        private IDialogService _dialogService;

        #endregion

        #region Properties
        
        // SeasonsCategory filter
        private ObservableCollection<SeasonCategory> _seasonsCategoryCollection;
        public ObservableCollection<SeasonCategory> SeasonsCategoryCollection
        {
            get => _seasonsCategoryCollection;
            set
            {
                if (value == _seasonsCategoryCollection) return;
                _seasonsCategoryCollection = value;
                RaisePropertyChanged(() => SeasonsCategoryCollection);
            }
        }
        private SeasonCategory _selectedSeason;
        public SeasonCategory SelectedSeason
        {
            get
            {
                return _selectedSeason;
            }
            set
            {
                if (_selectedSeason != value)
                {
                    _selectedSeason = value;
                }
            }
        }

        public ICommand SeasonsCategorySelectedCommand
        {
            get
            {
                return new Command( () =>
                {
                    if (SelectedSeason == null)
                        return;

                    var filteredItems = _source.Where(closetitem => closetitem.SeasonCategoryName == SelectedSeason.SeasonCategoryName).ToList();
                    foreach (var closetitem in _source)
                    {
                        if (!filteredItems.Contains(closetitem))
                        {
                            ClosetItems.Remove(closetitem);
                        }
                        else
                        {
                            if (!ClosetItems.Contains(closetitem))
                            {
                                ClosetItems.Add(closetitem);
                            }
                        }

                        SelectedSeason = null;
                    }
                });
            }
        }

        // ApparelCategory filter

        private ObservableCollection<ApparelCategory> _apparelCategoryCollection;
        public ObservableCollection<ApparelCategory> ApparelCategoryCollection
        {
            get => _apparelCategoryCollection;
            set
            {
                if (value == _apparelCategoryCollection) return;
                _apparelCategoryCollection = value;
                RaisePropertyChanged(() => ApparelCategoryCollection);
            }
        }
        private ApparelCategory _selectedApparelCategory;
        public ApparelCategory SelectedApparelCategory
        {
            get
            {
                return _selectedApparelCategory;
            }
            set
            {
                if (_selectedApparelCategory != value)
                {
                    _selectedApparelCategory = value;
                }
            }
        }

        public ICommand ApparelCategorySelectedCommand
        {
            get
            {
                return new Command(() =>
                {
                    if (SelectedApparelCategory == null)
                        return;

                    var filteredItems = _source.Where(closetitem => closetitem.ApparelCategoryName == SelectedApparelCategory.ApparelCategoryName).ToList();
                    foreach (var closetitem in _source)
                    {
                        if (!filteredItems.Contains(closetitem))
                        {
                            ClosetItems.Remove(closetitem);
                        }
                        else
                        {
                            if (!ClosetItems.Contains(closetitem))
                            {
                                ClosetItems.Add(closetitem);
                            }
                        }

                        SelectedApparelCategory = null;
                    }
                });
            }
        }

        // SizeCategory filter

        private ObservableCollection<SizeCategory> _sizeCategoryCollection;
        public ObservableCollection<SizeCategory> SizeCategoryCollection
        {
            get => _sizeCategoryCollection;
            set
            {
                if (value == _sizeCategoryCollection) return;
                _sizeCategoryCollection = value;
                RaisePropertyChanged(() => SizeCategoryCollection);
            }
        }
        private SizeCategory _selectedSizeCategory;
        public SizeCategory SelectedSizeCategory
        {
            get
            {
                return _selectedSizeCategory;
            }
            set
            {
                if (_selectedSizeCategory != value)
                {
                    _selectedSizeCategory = value;
                }
            }
        }

        public ICommand SizeCategorySelectedCommand
        {
            get
            {
                return new Command(() =>
                {
                    if (SelectedSizeCategory == null)
                        return;

                    var filteredItems = _source.Where(closetitem => closetitem.SizeCategoryName == SelectedSizeCategory.SizeCategoryName).ToList();
                    foreach (var closetitem in _source)
                    {
                        if (!filteredItems.Contains(closetitem))
                        {
                            ClosetItems.Remove(closetitem);
                        }
                        else
                        {
                            if (!ClosetItems.Contains(closetitem))
                            {
                                ClosetItems.Add(closetitem);
                            }
                        }

                        SelectedSizeCategory = null;
                    }
                });
            }
        }

        private ObservableCollection<MyClosetItem> _closetItems;
        public ObservableCollection<MyClosetItem> ClosetItems
        {
            get => _closetItems;
            set
            {
                if (value == _closetItems) return;
                _closetItems = value;
                RaisePropertyChanged(() => ClosetItems);
            }
        }

        private MyClosetItem _selectedClosetItem;
        public MyClosetItem SelectedClosetItem
        { 

            get => _selectedClosetItem;
            set
            {
                if (value == _selectedClosetItem) return;
                _selectedClosetItem = value;
                RaisePropertyChanged(() => _selectedClosetItem);
            }
        }


        private ObservableCollection<Object> _selectedClosetItems;
        public ObservableCollection<Object> SelectedClosetItems
        {
            get
            {
                return _selectedClosetItems;
            }
            set
            {
                if (value == _selectedClosetItems) return;
                _selectedClosetItems = value;
                RaisePropertyChanged(() => _selectedClosetItems);
            }
        }


        private string _selectedClosetItemMessage; 
        public string SelectedClosetItemMessage
        {
            get => _selectedClosetItemMessage;
            set
            {
                _selectedClosetItemMessage = value;
                RaisePropertyChanged(() => _selectedClosetItemMessage);
            }
        }

        public List<MyClosetItem> _source;

        int selectionCount = 1;

        public List<MyClosetItem> EmptyClosetItems { get; private set; }


        #endregion

       
        public MyClosetViewModel()
        {

            this.MultipleInitialization = true;

            _myClosetService = DependencyService.Get<IMyClosetService>();
            _settingsService = DependencyService.Get<ISettingsService>();
            _userService = DependencyService.Get<IUserService>();
            _dialogService = DependencyService.Get<IDialogService>();

            //source = new List<MyClosetItem>();

            //CreateClosetItemCollection();

            //_selectedClosetItem = ClosetItems.FirstOrDefault();
            //ClosetItemSelectionChanged();

            //SelectedClosetItems = new ObservableCollection<object>()
            //{
            //    ClosetItems[1], ClosetItems[2], ClosetItems[3]
            //};
        }

        public override async Task InitializeAsync(IDictionary<string, string> query)
        {
            IsBusy = true;
            //_source = new List<MyClosetItem>();
            _source = await _myClosetService.GetMyClosetAsyncSource();

            _source.Add(new MyClosetItem
            {
                Id = 21,
                PictureUri = "fake_product_01.png",
                Name = "Floral cap-sleeved blouse",
                Description = "a;lsdkfj;alskdfj;alskdjf;alskdjf;aslkdjf",
                SizeCategoryId = 2,
                SizeCategoryName = "Small",
                SeasonCategoryId = 2,
                SeasonCategoryName = "Spring",
                ApparelCategoryId = 3,
                ApparelCategoryName = "Top"
            });

            ClosetItems = new ObservableCollection<MyClosetItem>(_source);

            //ClosetItems = await _myClosetService.GetMyClosetAsync();
            SeasonsCategoryCollection = await _myClosetService.GetSeasonCategoriesAsync();
            ApparelCategoryCollection = await _myClosetService.GetApparelCategoriesAsync();
            SizeCategoryCollection = await _myClosetService.GetSizeCategoriesAsync();

            IsBusy = false;
        }


        void ClosetItemSelectionChanged()
        {
            _selectedClosetItemMessage = $"Selection {selectionCount}: {SelectedClosetItem.Name}";
            Console.WriteLine("message is " + _selectedClosetItemMessage);
            //OnPropertyChanged("SelectedClosetItemMessage");
            selectionCount++;
        }


    }
}
